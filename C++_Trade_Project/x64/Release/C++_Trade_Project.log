  stdafx.cpp
d:\quant\c++_trade_project\c++_trade_project\stdafx.cpp : warning C4819: The file contains a character that cannot be represented in the current code page (936). Save the file in Unicode format to prevent data loss
d:\quant\c++_trade_project\c++_trade_project\stdafx.h : warning C4819: The file contains a character that cannot be represented in the current code page (936). Save the file in Unicode format to prevent data loss
d:\quant\c++_trade_project\c++_trade_project\targetver.h : warning C4819: The file contains a character that cannot be represented in the current code page (936). Save the file in Unicode format to prevent data loss
  Basements.cpp
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type,ptrdiff_t,_Ty*,_Ty&>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              _Ty=internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type,ptrdiff_t,_Ty*,_Ty&>'
          with
          [
              _Ty=internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(194): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<Const,Encoding,Allocator>' being compiled
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(958): warning C4003: not enough arguments for function-like macro invocation 'max'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(964): warning C4003: not enough arguments for function-like macro invocation 'min'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(965): warning C4003: not enough arguments for function-like macro invocation 'max'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(982): warning C4003: not enough arguments for function-like macro invocation 'max'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(983): warning C4003: not enough arguments for function-like macro invocation 'max'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(548): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<false,Encoding,Allocator>' being compiled
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\schema.h(1325): note: see reference to class template instantiation 'rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>' being compiled
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\schema.h(1551): note: see reference to class template instantiation 'rapidjson::GenericSchemaDocument<rapidjson::Value,rapidjson::CrtAllocator>' being compiled
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(121): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4297): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(123): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4298): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(125): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4296): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(549): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<true,Encoding,Allocator>' being compiled
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(121): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4297): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(123): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4298): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(125): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4296): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(548): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<false,Encoding,Allocator>' being compiled
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\schema.h(1256): note: see reference to class template instantiation 'rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::CrtAllocator>' being compiled
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\schema.h(1551): note: see reference to class template instantiation 'rapidjson::internal::Schema<rapidjson::GenericSchemaDocument<rapidjson::Value,rapidjson::CrtAllocator>>' being compiled
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(121): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4297): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(123): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4298): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(125): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4296): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(549): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<true,Encoding,Allocator>' being compiled
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(121): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4297): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(123): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4298): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(125): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4296): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\c++_trade_project\basements.h(60): warning C4091: 'static ': ignored on left of 'Basements' when no variable is declared
d:\quant\c++_trade_project\c++_trade_project\basements.cpp(131): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
  EXX_Connection.cpp
d:\quant\c++_trade_project\c++_trade_project\exx_connection.h : warning C4819: The file contains a character that cannot be represented in the current code page (936). Save the file in Unicode format to prevent data loss
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type,ptrdiff_t,_Ty*,_Ty&>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              _Ty=internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type,ptrdiff_t,_Ty*,_Ty&>'
          with
          [
              _Ty=internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(194): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<Const,Encoding,Allocator>' being compiled
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(958): warning C4003: not enough arguments for function-like macro invocation 'max'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(964): warning C4003: not enough arguments for function-like macro invocation 'min'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(965): warning C4003: not enough arguments for function-like macro invocation 'max'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(982): warning C4003: not enough arguments for function-like macro invocation 'max'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(983): warning C4003: not enough arguments for function-like macro invocation 'max'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(548): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<false,Encoding,Allocator>' being compiled
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\schema.h(1325): note: see reference to class template instantiation 'rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>' being compiled
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\schema.h(1551): note: see reference to class template instantiation 'rapidjson::GenericSchemaDocument<rapidjson::Value,rapidjson::CrtAllocator>' being compiled
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(121): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4297): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(123): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4298): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(125): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4296): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(549): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<true,Encoding,Allocator>' being compiled
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(121): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4297): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(123): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4298): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(125): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4296): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(548): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<false,Encoding,Allocator>' being compiled
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\schema.h(1256): note: see reference to class template instantiation 'rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::CrtAllocator>' being compiled
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\schema.h(1551): note: see reference to class template instantiation 'rapidjson::internal::Schema<rapidjson::GenericSchemaDocument<rapidjson::Value,rapidjson::CrtAllocator>>' being compiled
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(121): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4297): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(123): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4298): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(125): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4296): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(549): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<true,Encoding,Allocator>' being compiled
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(121): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4297): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(123): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4298): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(125): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4296): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\c++_trade_project\basements.h(60): warning C4091: 'static ': ignored on left of 'Basements' when no variable is declared
d:\quant\c++_trade_project\c++_trade_project\exx_connection.h(204): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
d:\quant\c++_trade_project\c++_trade_project\exx_connection.cpp(12): warning C4067: unexpected tokens following preprocessor directive - expected a newline
d:\quant\c++_trade_project\c++_trade_project\exx_connection.cpp(579): warning C4244: 'return': conversion from '_Rep' to 'long', possible loss of data
          with
          [
              _Rep=__int64
          ]
d:\quant\c++_trade_project\c++_trade_project\exx_connection.cpp(592): warning C4267: 'argument': conversion from 'size_t' to 'int', possible loss of data
d:\quant\c++_trade_project\c++_trade_project\exx_connection.cpp(617): warning C4267: 'argument': conversion from 'size_t' to 'int', possible loss of data
d:\quant\c++_trade_project\c++_trade_project\exx_connection.cpp(636): warning C4267: 'argument': conversion from 'size_t' to 'int', possible loss of data
d:\quant\c++_trade_project\c++_trade_project\exx_connection.cpp(658): warning C4267: 'argument': conversion from 'size_t' to 'int', possible loss of data
d:\quant\c++_trade_project\c++_trade_project\exx_connection.cpp(677): warning C4267: 'argument': conversion from 'size_t' to 'int', possible loss of data
d:\quant\c++_trade_project\c++_trade_project\exx_connection.cpp(701): warning C4267: 'argument': conversion from 'size_t' to 'int', possible loss of data
  Main.cpp
d:\quant\c++_trade_project\c++_trade_project\main.cpp(1): warning C4819: The file contains a character that cannot be represented in the current code page (936). Save the file in Unicode format to prevent data loss
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type,ptrdiff_t,_Ty*,_Ty&>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              _Ty=internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type,ptrdiff_t,_Ty*,_Ty&>'
          with
          [
              _Ty=internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(194): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<Const,Encoding,Allocator>' being compiled
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(958): warning C4003: not enough arguments for function-like macro invocation 'max'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(964): warning C4003: not enough arguments for function-like macro invocation 'min'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(965): warning C4003: not enough arguments for function-like macro invocation 'max'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(982): warning C4003: not enough arguments for function-like macro invocation 'max'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(983): warning C4003: not enough arguments for function-like macro invocation 'max'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(548): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<false,Encoding,Allocator>' being compiled
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\schema.h(1325): note: see reference to class template instantiation 'rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>' being compiled
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\schema.h(1551): note: see reference to class template instantiation 'rapidjson::GenericSchemaDocument<rapidjson::Value,rapidjson::CrtAllocator>' being compiled
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(121): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4297): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(123): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4298): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(125): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4296): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(549): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<true,Encoding,Allocator>' being compiled
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(121): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4297): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(123): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4298): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(125): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4296): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(548): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<false,Encoding,Allocator>' being compiled
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\schema.h(1256): note: see reference to class template instantiation 'rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::CrtAllocator>' being compiled
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\schema.h(1551): note: see reference to class template instantiation 'rapidjson::internal::Schema<rapidjson::GenericSchemaDocument<rapidjson::Value,rapidjson::CrtAllocator>>' being compiled
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(121): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4297): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(123): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4298): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(125): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4296): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(549): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<true,Encoding,Allocator>' being compiled
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(121): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4297): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(123): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4298): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(125): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4296): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\c++_trade_project\basements.h(60): warning C4091: 'static ': ignored on left of 'Basements' when no variable is declared
d:\quant\c++_trade_project\c++_trade_project\okex_connection.h(203): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
  OKEx_Connection.cpp
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type,ptrdiff_t,_Ty*,_Ty&>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              _Ty=internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type,ptrdiff_t,_Ty*,_Ty&>'
          with
          [
              _Ty=internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(194): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<Const,Encoding,Allocator>' being compiled
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(958): warning C4003: not enough arguments for function-like macro invocation 'max'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(964): warning C4003: not enough arguments for function-like macro invocation 'min'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(965): warning C4003: not enough arguments for function-like macro invocation 'max'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(982): warning C4003: not enough arguments for function-like macro invocation 'max'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(983): warning C4003: not enough arguments for function-like macro invocation 'max'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(548): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<false,Encoding,Allocator>' being compiled
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\schema.h(1325): note: see reference to class template instantiation 'rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>' being compiled
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\schema.h(1551): note: see reference to class template instantiation 'rapidjson::GenericSchemaDocument<rapidjson::Value,rapidjson::CrtAllocator>' being compiled
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(121): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4297): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(123): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4298): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(125): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4296): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(549): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<true,Encoding,Allocator>' being compiled
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(121): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4297): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(123): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4298): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(125): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4296): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(548): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<false,Encoding,Allocator>' being compiled
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\schema.h(1256): note: see reference to class template instantiation 'rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::CrtAllocator>' being compiled
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\schema.h(1551): note: see reference to class template instantiation 'rapidjson::internal::Schema<rapidjson::GenericSchemaDocument<rapidjson::Value,rapidjson::CrtAllocator>>' being compiled
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(121): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4297): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(123): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4298): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(125): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4296): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(549): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<true,Encoding,Allocator>' being compiled
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(121): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4297): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(123): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4298): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(125): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4296): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\c++_trade_project\basements.h(60): warning C4091: 'static ': ignored on left of 'Basements' when no variable is declared
d:\quant\c++_trade_project\c++_trade_project\okex_connection.h(203): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
d:\quant\c++_trade_project\c++_trade_project\okex_connection.cpp(13): warning C4067: unexpected tokens following preprocessor directive - expected a newline
d:\quant\c++_trade_project\c++_trade_project\okex_connection.cpp(856): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
d:\quant\c++_trade_project\c++_trade_project\okex_connection.cpp(880): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
d:\quant\c++_trade_project\c++_trade_project\okex_connection.cpp(912): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
d:\quant\c++_trade_project\c++_trade_project\okex_connection.cpp(935): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
d:\quant\c++_trade_project\c++_trade_project\okex_connection.cpp(1000): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
d:\quant\c++_trade_project\c++_trade_project\okex_connection.cpp(1018): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
d:\quant\c++_trade_project\c++_trade_project\okex_connection.cpp(1072): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
d:\quant\c++_trade_project\c++_trade_project\okex_connection.cpp(1099): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
d:\quant\c++_trade_project\c++_trade_project\okex_connection.cpp(1138): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
  TTEX_Connection.cpp
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type,ptrdiff_t,_Ty*,_Ty&>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              _Ty=internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type,ptrdiff_t,_Ty*,_Ty&>'
          with
          [
              _Ty=internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(194): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<Const,Encoding,Allocator>' being compiled
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(958): warning C4003: not enough arguments for function-like macro invocation 'max'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(964): warning C4003: not enough arguments for function-like macro invocation 'min'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(965): warning C4003: not enough arguments for function-like macro invocation 'max'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(982): warning C4003: not enough arguments for function-like macro invocation 'max'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(983): warning C4003: not enough arguments for function-like macro invocation 'max'
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(548): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<false,Encoding,Allocator>' being compiled
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\schema.h(1325): note: see reference to class template instantiation 'rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>' being compiled
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\schema.h(1551): note: see reference to class template instantiation 'rapidjson::GenericSchemaDocument<rapidjson::Value,rapidjson::CrtAllocator>' being compiled
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(121): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4297): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(123): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4298): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(125): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4296): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(549): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<true,Encoding,Allocator>' being compiled
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(121): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4297): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(123): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4298): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(125): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4296): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(548): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<false,Encoding,Allocator>' being compiled
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\schema.h(1256): note: see reference to class template instantiation 'rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::CrtAllocator>' being compiled
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\schema.h(1551): note: see reference to class template instantiation 'rapidjson::internal::Schema<rapidjson::GenericSchemaDocument<rapidjson::Value,rapidjson::CrtAllocator>>' being compiled
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(121): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4297): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(123): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4298): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(125): warning C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4296): note: see declaration of 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(110): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(102): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(549): note: see reference to class template instantiation 'rapidjson::GenericMemberIterator<true,Encoding,Allocator>' being compiled
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(121): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4297): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::pointer'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(123): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4298): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::reference'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\packages\tencent.rapidjson.1.1.1\lib\native\include\rapidjson\document.h(125): warning C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility(4296): note: see declaration of 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,_Ty *,_Ty &>::difference_type'
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::CrtAllocator,
              _Ty=const rapidjson::GenericMember<rapidjson::UTF8<char>,rapidjson::CrtAllocator>
          ]
d:\quant\c++_trade_project\c++_trade_project\basements.h(60): warning C4091: 'static ': ignored on left of 'Basements' when no variable is declared
d:\quant\c++_trade_project\c++_trade_project\ttex_connection.cpp(12): warning C4067: unexpected tokens following preprocessor directive - expected a newline
d:\quant\c++_trade_project\c++_trade_project\ttex_connection.cpp(82): warning C4267: 'argument': conversion from 'size_t' to 'int', possible loss of data
d:\quant\c++_trade_project\c++_trade_project\ttex_connection.cpp(137): warning C4267: 'argument': conversion from 'size_t' to 'int', possible loss of data
d:\quant\c++_trade_project\c++_trade_project\ttex_connection.cpp(183): warning C4267: 'argument': conversion from 'size_t' to 'int', possible loss of data
d:\quant\c++_trade_project\c++_trade_project\ttex_connection.cpp(229): warning C4267: 'argument': conversion from 'size_t' to 'int', possible loss of data
d:\quant\c++_trade_project\c++_trade_project\ttex_connection.cpp(274): warning C4267: 'argument': conversion from 'size_t' to 'int', possible loss of data
  Generating code
  All 943 functions were compiled because no usable IPDB/IOBJ from previous compilation was found.
  Finished generating code
libeay32.lib(cryptlib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(cryptlib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(mem.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(mem.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(mem_dbg.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(mem_dbg.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ex_data.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ex_data.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(o_time.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(o_time.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(o_init.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(o_init.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(mem_clr.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(mem_clr.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(md5_dgst.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(md5_dgst.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(sha1dgst.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(sha1dgst.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(sha1_one.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(sha1_one.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(sha256.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(sha256.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(sha512.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(sha512.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(hmac.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(hmac.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(hm_ameth.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(hm_ameth.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(hm_pmeth.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(hm_pmeth.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(cmac.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(cmac.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(cm_ameth.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(cm_ameth.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(cm_pmeth.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(cm_pmeth.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(set_key.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(set_key.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ecb3_enc.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ecb3_enc.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(cfb64ede.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(cfb64ede.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ofb64ede.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ofb64ede.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(des_enc.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(des_enc.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(aes_misc.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(aes_misc.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(aes_wrap.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(aes_wrap.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(aes_core.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(aes_core.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(aes_cbc.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(aes_cbc.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(cbc128.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(cbc128.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ctr128.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ctr128.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(cfb128.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(cfb128.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ofb128.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ofb128.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(gcm128.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(gcm128.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ccm128.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ccm128.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(xts128.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(xts128.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(wrap128.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(wrap128.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_add.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_add.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_div.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_div.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_exp.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_exp.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_ctx.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_ctx.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_mul.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_mul.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_mod.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_mod.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_print.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_print.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_rand.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_rand.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_shift.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_shift.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_word.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_word.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_blind.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_blind.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_kron.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_kron.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_sqrt.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_sqrt.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_gcd.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_gcd.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_prime.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_prime.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_sqr.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_sqr.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_asm.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_asm.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_recp.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_recp.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_mont.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_mont.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_exp2.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_exp2.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_gf2m.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_gf2m.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bn_nist.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bn_nist.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(rsa_eay.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(rsa_eay.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(rsa_gen.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(rsa_gen.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(rsa_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(rsa_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(rsa_sign.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(rsa_sign.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(rsa_saos.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(rsa_saos.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(rsa_pk1.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(rsa_pk1.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(rsa_ssl.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(rsa_ssl.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(rsa_none.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(rsa_none.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(rsa_oaep.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(rsa_oaep.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(rsa_pss.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(rsa_pss.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(rsa_x931.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(rsa_x931.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(rsa_asn1.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(rsa_asn1.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(rsa_ameth.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(rsa_ameth.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(rsa_pmeth.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(rsa_pmeth.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(rsa_crpt.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(rsa_crpt.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dsa_gen.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dsa_gen.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dsa_key.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dsa_key.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dsa_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dsa_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dsa_asn1.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dsa_asn1.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dsa_vrf.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dsa_vrf.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dsa_sign.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dsa_sign.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dsa_ossl.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dsa_ossl.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dsa_ameth.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dsa_ameth.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dsa_pmeth.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dsa_pmeth.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dso_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dso_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dso_openssl.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dso_openssl.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dso_win32.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dso_win32.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dh_asn1.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dh_asn1.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dh_gen.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dh_gen.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dh_key.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dh_key.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dh_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dh_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dh_check.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dh_check.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dh_ameth.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dh_ameth.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dh_pmeth.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dh_pmeth.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dh_rfc5114.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dh_rfc5114.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(dh_kdf.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(dh_kdf.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ec_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ec_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ecp_smpl.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ecp_smpl.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ecp_mont.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ecp_mont.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ecp_nist.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ecp_nist.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ec_cvt.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ec_cvt.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ec_mult.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ec_mult.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ec_curve.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ec_curve.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ec_print.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ec_print.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ec_asn1.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ec_asn1.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ec_key.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ec_key.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ec2_smpl.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ec2_smpl.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ec2_mult.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ec2_mult.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ec_ameth.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ec_ameth.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ec_pmeth.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ec_pmeth.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(eck_prn.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(eck_prn.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ecp_oct.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ecp_oct.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ec2_oct.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ec2_oct.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ec_oct.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ec_oct.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ech_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ech_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ech_ossl.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ech_ossl.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ech_key.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ech_key.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ech_kdf.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ech_kdf.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ecs_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ecs_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ecs_asn1.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ecs_asn1.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ecs_ossl.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ecs_ossl.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ecs_sign.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ecs_sign.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ecs_vrf.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ecs_vrf.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(buffer.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(buffer.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(buf_str.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(buf_str.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bio_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bio_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bss_mem.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bss_mem.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bss_null.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bss_null.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bss_file.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bss_file.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bf_buff.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bf_buff.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(b_print.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(b_print.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(b_dump.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(b_dump.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(stack.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(stack.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(lhash.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(lhash.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(md_rand.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(md_rand.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(rand_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(rand_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(rand_win.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(rand_win.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(err.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(err.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(err_prn.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(err_prn.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(o_names.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(o_names.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(obj_dat.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(obj_dat.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(obj_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(obj_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(obj_xref.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(obj_xref.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(encode.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(encode.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(digest.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(digest.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(evp_enc.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(evp_enc.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(evp_key.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(evp_key.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(e_des3.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(e_des3.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(e_aes.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(e_aes.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(names.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(names.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(m_md5.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(m_md5.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(m_sha1.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(m_sha1.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(p_sign.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(p_sign.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(p_verify.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(p_verify.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(p_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(p_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bio_md.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bio_md.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bio_b64.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bio_b64.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bio_enc.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bio_enc.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(evp_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(evp_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(evp_pkey.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(evp_pkey.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(evp_pbe.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(evp_pbe.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(p5_crpt.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(p5_crpt.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(p5_crpt2.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(p5_crpt2.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(pmeth_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(pmeth_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(pmeth_fn.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(pmeth_fn.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(pmeth_gn.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(pmeth_gn.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(m_sigver.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(m_sigver.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_object.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_object.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_bitstr.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_bitstr.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_utctm.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_utctm.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_gentm.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_gentm.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_time.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_time.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_int.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_int.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_octet.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_octet.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_print.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_print.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_type.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_type.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_set.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_set.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_dup.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_dup.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_d2i_fp.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_d2i_fp.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_i2d_fp.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_i2d_fp.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_enum.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_enum.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_utf8.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_utf8.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_sign.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_sign.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_digest.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_digest.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_verify.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_verify.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_mbstr.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_mbstr.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_strex.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_strex.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x_algor.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x_algor.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x_val.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x_val.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x_pubkey.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x_pubkey.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x_sig.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x_sig.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x_req.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x_req.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x_attrib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x_attrib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x_bignum.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x_bignum.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x_long.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x_long.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x_name.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x_name.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x_x509.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x_x509.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x_x509a.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x_x509a.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x_crl.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x_crl.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x_spki.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x_spki.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(d2i_pr.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(d2i_pr.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(i2d_pr.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(i2d_pr.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(t_x509.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(t_x509.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(t_x509a.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(t_x509a.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(t_pkey.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(t_pkey.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(tasn_new.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(tasn_new.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(tasn_fre.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(tasn_fre.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(tasn_enc.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(tasn_enc.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(tasn_dec.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(tasn_dec.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(tasn_utl.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(tasn_utl.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(tasn_typ.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(tasn_typ.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(tasn_prn.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(tasn_prn.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ameth_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ameth_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(f_int.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(f_int.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(f_string.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(f_string.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_bool.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_bool.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x_exten.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x_exten.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bio_asn1.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bio_asn1.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(bio_ndef.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(bio_ndef.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(asn_mime.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(asn_mime.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(asn1_gen.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(asn1_gen.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(asn1_par.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(asn1_par.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(asn1_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(asn1_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_bytes.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_bytes.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(a_strnid.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(a_strnid.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(evp_asn1.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(evp_asn1.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(asn_pack.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(asn_pack.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(p5_pbe.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(p5_pbe.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(p5_pbev2.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(p5_pbev2.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(p8_pkey.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(p8_pkey.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(pem_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(pem_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(pem_oth.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(pem_oth.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x509_def.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x509_def.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x509_cmp.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x509_cmp.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x509_obj.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x509_obj.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x509_req.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x509_req.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x509_vfy.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x509_vfy.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x509cset.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x509cset.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x509rset.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x509rset.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x509name.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x509name.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x509_v3.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x509_v3.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x509_ext.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x509_ext.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x509_att.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x509_att.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x509_lu.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x509_lu.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x_all.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x_all.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x509_trs.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x509_trs.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(x509_vpm.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(x509_vpm.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_bcons.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_bcons.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_bitst.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_bitst.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_conf.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_conf.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_extku.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_extku.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_ia5.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_ia5.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_prn.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_prn.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_utl.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_utl.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_genn.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_genn.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_alt.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_alt.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_skey.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_skey.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_akey.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_akey.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_pku.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_pku.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_int.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_int.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_enum.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_enum.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_sxnet.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_sxnet.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_cpols.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_cpols.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_crld.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_crld.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_purp.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_purp.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_info.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_info.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_ocsp.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_ocsp.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_akeya.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_akeya.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_pmaps.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_pmaps.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_pcons.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_pcons.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_ncons.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_ncons.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_pcia.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_pcia.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_pci.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_pci.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(pcy_cache.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(pcy_cache.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(pcy_node.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(pcy_node.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(pcy_data.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(pcy_data.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(pcy_map.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(pcy_map.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(pcy_tree.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(pcy_tree.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(pcy_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(pcy_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(v3_scts.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(v3_scts.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(cms_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(cms_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(cms_asn1.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(cms_asn1.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(cms_att.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(cms_att.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(cms_io.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(cms_io.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(cms_sd.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(cms_sd.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(cms_dd.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(cms_dd.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(cms_env.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(cms_env.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(cms_enc.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(cms_enc.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(cms_pwri.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(cms_pwri.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(cms_kari.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(cms_kari.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(conf_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(conf_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(conf_api.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(conf_api.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(conf_def.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(conf_def.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(conf_mod.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(conf_mod.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(pk7_asn1.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(pk7_asn1.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(pk7_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(pk7_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(pk7_doit.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(pk7_doit.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(pk7_attr.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(pk7_attr.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(p12_add.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(p12_add.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(p12_asn.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(p12_asn.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(p12_crpt.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(p12_crpt.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(p12_decr.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(p12_decr.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(p12_key.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(p12_key.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(p12_utl.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(p12_utl.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(p12_p8d.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(p12_p8d.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(p12_p8e.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(p12_p8e.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(eng_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(eng_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(eng_list.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(eng_list.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(eng_init.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(eng_init.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(eng_ctrl.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(eng_ctrl.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(eng_table.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(eng_table.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(tb_rsa.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(tb_rsa.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(tb_dsa.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(tb_dsa.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(tb_ecdsa.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(tb_ecdsa.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(tb_dh.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(tb_dh.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(tb_ecdh.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(tb_ecdh.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(tb_rand.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(tb_rand.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(tb_cipher.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(tb_cipher.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(tb_digest.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(tb_digest.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(tb_pkmeth.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(tb_pkmeth.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(tb_asnmth.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(tb_asnmth.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ocsp_asn.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ocsp_asn.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ocsp_ht.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ocsp_ht.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ui_lib.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ui_lib.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
libeay32.lib(ui_openssl.obj) : warning LNK4099: PDB 'lib.pdb' was not found with 'libeay32.lib(ui_openssl.obj)' or at 'D:\Quant\C++_Trade_Project\x64\Release\lib.pdb'; linking object as if no debug info
  C++_Trade_Project.vcxproj -> D:\Quant\C++_Trade_Project\x64\Release\C++_Trade_Project.exe
